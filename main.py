import sys
import traceback
from PyQt6.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QHBoxLayout, QCheckBox, QFrame, QPushButton, QLineEdit, QSystemTrayIcon, QMenu
from PyQt6.QtGui import QFont, QIcon, QAction
from PyQt6.QtCore import QTimer, Qt
import psutil, GPUtil, threading, requests, asyncio
from weather import get_weather, icons
from telegram_bot import TelegramBot
import json

def log_error(e):
    with open("error.log", "a", encoding="utf-8") as f:
        f.write(str(e) + "\n")
        traceback.print_exc(file=f)

# --- –í—ã–Ω–µ—Å–∏—Ç–µ config —Å—é–¥–∞ ---
config = {
    'AK_weather': "",
    'AK_telegram': "",
    'city': "",
    'bot_bool': False
}
# ----------------------------

def create_config():
    try:
        with open('config.json', 'w', encoding='utf-8') as file:
            json.dump(config, file, indent=4)
        return True
    except Exception as e:
        print(f"Error creating config: {e}")
        return False

def load_config():
    global config
    try:
        with open('config.json', 'r', encoding='utf-8') as file:
            config.update(json.load(file))
        return True
    except FileNotFoundError:
        print("Config file not found")
        create_config()
        return False
    except Exception as e:
        print(f"Error loading config: {e}")
        return False

class SettingsWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setGeometry(100, 100, 100, 200)
        self.settings_window = None  
    
    
        # Telegram-–±–æ—Ç
        self.telegram_bot = None
        self.bot_thread = None

        self.initUI()
        self.update_weather()
        self.update_stats()

        #–¢–∞–π–º–µ—Ä–∏–∫–∏, —Å–≤–µ—Ä—Ö—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Å–Ω–∏–∑—É –¥–ª—è –ø–æ–≥–æ–¥—ã
        self.stats_timer = QTimer()
        self.stats_timer.timeout.connect(self.update_stats)
        self.stats_timer.start(1000)  

        self.weather_timer = QTimer()
        self.weather_timer.timeout.connect(self.update_weather)
        self.weather_timer.start(600000)  


    def initUI(self):
        main_layout = QVBoxLayout()  # Changed to QVBoxLayout to stack vertically
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_btn.setFont(QFont("Arial", 12))
        settings_btn.clicked.connect(self.open_settings)
        main_layout.addWidget(settings_btn)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_layout = QHBoxLayout()

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å (–±–æ—Ç –∏ –ø–æ–≥–æ–¥–∞)
        left_layout = QVBoxLayout()
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.bot_status = QLabel("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω" if config.get('bot_bool', False) else "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
        self.bot_status.setFont(QFont("Arial", 16))
        left_layout.addWidget(self.bot_status)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        city_layout = QHBoxLayout()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        self.city_label = QLabel(f"{config.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        self.city_label.setFont(QFont("Arial", 16))
        self.city_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        city_layout.addWidget(self.city_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ")
        refresh_btn.setFixedSize(30, 30)
        refresh_btn.setFont(QFont("Arial", 10))
        refresh_btn.clicked.connect(self.refresh_data)
        city_layout.addWidget(refresh_btn)

        left_layout.addLayout(city_layout)

        # –ò–∫–æ–Ω–∫–∞ –ø–æ–≥–æ–¥—ã –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        self.weather_label = QLabel()
        self.weather_label.setFont(QFont("Arial", 24))
        left_layout.addWidget(self.weather_label)

        # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        self.weather_desc = QLabel()
        self.weather_desc.setFont(QFont("Arial", 16))
        left_layout.addWidget(self.weather_desc)

        # "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫"
        self.feels_like_label = QLabel()
        self.feels_like_label.setFont(QFont("Arial", 16))
        left_layout.addWidget(self.feels_like_label)

        content_layout.addLayout(left_layout)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.VLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setContentsMargins(5, 0, 5, 0)
        content_layout.addWidget(separator)

        #—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        right_layout = QVBoxLayout()
        self.cpu_label = QLabel("CPU: ...%")
        self.gpu_label = QLabel("GPU: ...%")
        self.ram_label = QLabel("RAM: ...%")

        for lbl in [self.cpu_label, self.gpu_label, self.ram_label]:
            lbl.setFont(QFont("Arial", 16))
            right_layout.addWidget(lbl)

        self.tray_icon = QSystemTrayIcon(QIcon("icon.ico"), self)
        self.tray_icon.setToolTip("PC Helper")
        self.tray_icon.activated.connect(self.on_tray_activated)

        tray_menu = QMenu()
        restore_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å", self)
        restore_action.triggered.connect(self.showNormal)
        quit_action = QAction("–í—ã—Ö–æ–¥", self)
        quit_action.triggered.connect(QApplication.instance().quit)
        tray_menu.addAction(restore_action)
        tray_menu.addAction(quit_action)
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.show()


        content_layout.addLayout(right_layout)
        main_layout.addLayout(content_layout)
        self.setLayout(main_layout)

    def open_settings(self):
        if self.settings_window is None:
            self.settings_window = QWidget()
            self.settings_window.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            self.settings_window.setGeometry(200, 200, 300, 350)

            layout = QVBoxLayout()

            # Telegram Bot Section Header
            tg_header = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")
            tg_header.setFont(QFont("Arial", 12, QFont.Weight.Bold))
            layout.addWidget(tg_header)
            layout.setSpacing(5)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

            # Telegram bot checkbox
            self.tg_bot_checkbox = QCheckBox("Telegram –±–æ—Ç")
            self.tg_bot_checkbox.setChecked(config.get('bot_bool', False))
            layout.addWidget(self.tg_bot_checkbox)

            # Token input field with current token
            self.token_input = QLineEdit()
            self.token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
            current_token = config.get('AK_telegram', '')
            self.token_input.setText(current_token)
            layout.addWidget(self.token_input)

            # Weather Section Header
            weather_header = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã")
            weather_header.setFont(QFont("Arial", 12, QFont.Weight.Bold))
            layout.addWidget(weather_header)

            # Weather API key input
            self.weather_api_input = QLineEdit()
            self.weather_api_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –ø–æ–≥–æ–¥—ã")
            current_weather_api = config.get('AK_weather', '')
            self.weather_api_input.setText(current_weather_api)
            layout.addWidget(self.weather_api_input)

            # City input
            self.city_input = QLineEdit()
            self.city_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            current_city = config.get('city', '')
            self.city_input.setText(current_city)
            layout.addWidget(self.city_input)

            # –≠—Ç–æ –º—ã —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º
            #self.dpi_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç DPI")
            #self.dpi_checkbox.setChecked(config.get('dpi_enabled', False))
            #layout.addWidget(self.dpi_checkbox)

            # Apply button
            apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
            apply_btn.clicked.connect(self.apply_settings)
            layout.addWidget(apply_btn)

            self.settings_window.setLayout(layout)
        self.settings_window.show()


    def apply_settings(self):
        token = self.token_input.text().strip()
        weather_api = self.weather_api_input.text().strip()
        city = self.city_input.text().strip()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ config
        config['AK_telegram'] = token
        config['AK_weather'] = weather_api
        config['city'] = city
        config['bot_bool'] = self.tg_bot_checkbox.isChecked()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config.json
        try:
            with open('config.json', 'w', encoding='utf-8') as file:
                json.dump(config, file, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        load_config()
        self.refresh_data()

        print("Settings updated successfully")
        self.settings_window.close()

        # –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        #dpi_enabled = self.dpi_checkbox.isChecked()
        #updated = False
        #for i, line in enumerate(content):
        #    if line.startswith('dpi_enabled='):
        #        content[i] = f'dpi_enabled={dpi_enabled}\n'
        #        updated = True
        #if not updated:
        #    content.append(f'dpi_enabled={dpi_enabled}\n')

        # Write updated content back to the file
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

    

    def start_telegram_bot(self):
        if not self.telegram_bot:
            token = config.get('AK_telegram', '')
            if not token:
                print("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
                self.bot_status.setText("–û—à–∏–±–∫–∞ TG-–±–æ—Ç–∞ T1")
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º my_id
            url = f"https://api.telegram.org/bot{token}/getMe"
            try:
                response = requests.get(url)
                if response.status_code != 200 or not response.json().get("ok"):
                    raise ValueError("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                self.bot_status.setText("–û—à–∏–±–∫–∞ TG-–±–æ—Ç–∞ T2")
                return

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
            try:
                self.telegram_bot = TelegramBot(token, config.get('AK_telegram_id', ''))  # –ü–µ—Ä–µ–¥–∞–µ–º my_id
                self.bot_thread = threading.Thread(target=self.telegram_bot.start_bot, daemon=True)
                self.bot_thread.start()
                print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                self.bot_status.setText("TG-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                print(f"Error starting telegram bot: {e}")
                self.bot_status.setText("–û—à–∏–±–∫–∞ TG-–±–æ—Ç–∞ E0")



    def stop_telegram_bot(self):
        if self.telegram_bot:
            try:
                self.telegram_bot.stop_bot()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                self.telegram_bot = None
                self.bot_thread = None
                print("Telegram-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.bot_status.setText("TG-–±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram-–±–æ—Ç–∞: {e}")

    def refresh_data(self):
        load_config()
        city = config.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        self.city_label.setText(f"{city}")
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã
        self.update_weather()

    
        print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def update_weather(self):
        try:
            city = config.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            weather = get_weather(city, config.get('AK_weather', ''))
            if weather and all(weather.values()):
                icon = icons.get(weather['icon'], '‚ùì') # –ª—è –∫–∞–∫–∞—è –∏–∫–æ–Ω–∫–∞ 
                self.weather_label.setText(f"{icon}  {weather['temperature']}¬∞C")
                self.weather_desc.setText(f"{weather['description']}".capitalize())
                self.feels_like_label.setText(f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['temperature_feels']}¬∞C")
            else:
                self.weather_label.setText("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") # –∏ –∑–¥–µ—Å—å —Ç–æ–∂–µ
                self.weather_desc.setText(f"–ü–æ–≥–æ–¥–∞: --")
                self.feels_like_label.setText(f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: --¬∞C")
        except Exception as e:
            self.weather_label.setText("‚ùå –û—à–∏–±–∫–∞") # –ê —Ç—É—Ç –¥—Ä—É–≥–∞—è 
            self.weather_desc.setText(f"–ü–æ–≥–æ–¥–∞: --")
            self.feels_like_label.setText(f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: --¬∞C")
            print(f"Weather update error: {e}")

    def update_stats(self):
        # –¢—É—Ç —É –Ω–∞—Å CPU, RAM –∏ GPU
        cpu = psutil.cpu_percent()
        ram = psutil.virtual_memory().percent
        gpus = GPUtil.getGPUs() # GPU
        gpu = gpus[0].load * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç–∏–∫–∏
        #–û–±–Ω–æ–≤–ª—è–µ–º
        self.gpu_label.setText(f"GPU: {gpu:.1f}%")
        self.cpu_label.setText(f"CPU: {cpu}%")
        self.ram_label.setText(f"RAM: {ram}%")

    def closeEvent(self, event):
        event.ignore()
        self.hide()
        self.tray_icon.showMessage("PC Helper", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π", QSystemTrayIcon.MessageIcon.Information)

    def on_tray_activated(self, reason):
        if reason == QSystemTrayIcon.ActivationReason.DoubleClick:
            self.showNormal()
            self.activateWindow()

if __name__ == "__main__":
    try:
        if not load_config():
            create_config()
        app = QApplication(sys.argv)
        app.setWindowIcon(QIcon("icon.ico"))  
        window = SettingsWindow()
        window.start_telegram_bot()
        window.show()
        sys.exit(app.exec())
    except Exception as e:
        log_error(e)


